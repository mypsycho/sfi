# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License niat
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# At least 1 uniqueMember is required in group.
# We choose the admin.



##
##  Server management
## 
# Define roles of 'Apache-Tomcat' : predefined 
dn: ou=tomcat,${sfi.ldap.group.base}
objectClass: organizationalUnit

# Define roles of application 'manager'
dn: cn=manager,ou=tomcat,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}

# Define roles of 'Share/Webdav'
dn: cn=share,ou=tomcat,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}

dn: cn=share-read,ou=tomcat,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}


##
##  SCM management
## 
dn: ou=scm,${sfi.ldap.group.base}
objectClass: organizationalUnit

dn: cn=admin,ou=scm,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}

dn: cn=read,ou=scm,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}

dn: cn=write,ou=scm,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}


##
##  Jenkins management
## 
dn: ou=jenkins,${sfi.ldap.group.base}
objectClass: organizationalUnit

dn: cn=admin,ou=jenkins,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}

dn: cn=project,ou=jenkins,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}

dn: cn=developer,ou=jenkins,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}

dn: cn=visitor,ou=jenkins,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}



##
##  Nexus management
##   note : mapping on existing roles

dn: ou=nexus,${sfi.ldap.group.base}
objectClass: organizationalUnit

dn: cn=nx-admin,ou=nexus,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}

dn: cn=nx-deployment,ou=nexus,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}

dn: cn=nx-developer,ou=nexus,${sfi.ldap.group.base}
objectClass: groupOfUniqueNames
uniqueMember: ${sfi.ldap.bind.dn}



# Define roles of 'sonar' : none (no externalization)



# Define roles of 'redmine' : none (no externalization)



# Note: Template to give a person a role
#dn: ${role.dn}
#changetype: modify
#add: uniqueMember
#uniqueMember: uid=${person.uid},${sfi.ldap.user.base}

