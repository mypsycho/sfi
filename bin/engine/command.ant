<?xml version="1.0" encoding="UTF-8"?>

<project name="sfi-command" basedir="../.." 
    xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors" >

  <macrodef name="message">
    <attribute name="name" />
	<attribute name="level" default="   info  " />
    <sequential>
      <concat taskname="@{level}" >
        <string>${message.@{name}}</string>
        <filterchain><expandproperties/></filterchain>
      </concat>
    </sequential>
  </macrodef>
    
  <macrodef name="assert">
    <attribute name="name" />
    <element name="assert" implicit="true" />
    <sequential>
      <loadfile property="sfi-failure[@{name}]" >
        <concat>
          <string>${message.error.@{name}}</string>
          <filterchain><expandproperties/></filterchain>
        </concat>
      </loadfile>
      <fail message="${sfi-failure[@{name}]}" taskname=" error ">
        <condition>
          <not>
            <assert />
          </not>
        </condition>
      </fail>
    </sequential>
  </macrodef>

  <!-- Macro is required to have a recursive interpretation of properties -->
  <macrodef name="do">
    <attribute name="command" />
    <sequential>
      <antcall target="module.${module.exec[@{command}]}" />
    </sequential>
  </macrodef>


  <target name="assertModuleExists" unless="module.name">
    <message name="error.missingModule" />
    <echoproperties taskname=" info  ">
      <propertyset>
        <propertyref regex="^sfi\.([a-zA-Z]+)\.name$$" />
        <regexpmapper from="^sfi\.([a-zA-Z]+)\.name$$" to="\1" />
      </propertyset>
    </echoproperties>
    <assert message="missingModule">
      <not><isset property="module.name" /></not>
    </assert>
  </target>

  <target name="module.exec" depends="assertModuleExists">
    <!-- default command is delegate -->
    <property name="module.exec[${module.command}]" value="delegate" />
    <do command="${module.command}" />
  </target>

  <target name="module.message">
    <message name="${module.exec.message}" />
  </target>

  <target name="filteredCopy" >
    <property name="binariesFile" value="${basedir}.binaries" />
    <property name="deprecatedFile" value="${basedir}.deprecated" />
    <condition property="binaries.available">
      <resourceexists>
        <file file="${binariesFile}"/>
      </resourceexists>
    </condition>      

    <condition property="deprecated.available">
      <resourceexists>
        <file file="${deprecatedFile}"/>
      </resourceexists>
    </condition>      

    <chmod perm="ugo+rx" >
      <fileset dir="${basedir}" >
        <type type="file" />
      </fileset>
    </chmod>
    
    <copy todir="${module.exec.todir}" overwrite="true" >
      <fileset dir="${basedir}" >
        <exclude name="**/*.exe" />
        <excludesfile name="${binariesFile}" if="binaries.available" />
      </fileset>
      <filterset>
        <filtersfile file="${filter.file}" />
      </filterset>
    </copy>
    
    <copy todir="${module.exec.todir}" overwrite="true" >
      <fileset dir="${basedir}" >
        <include name="**/*.exe" />
        <includesfile name="${binariesFile}" if="binaries.available" />
      </fileset>
    </copy>
    
    <delete failonerror="false" >
      <fileset dir="${module.exec.todir}" >
          <includesfile name="${deprecatedFile}" if="deprecated.available" />
          <exclude name="**/*" unless="deprecated.available" />
      </fileset>
    </delete>
      
  </target>
      
  <target name="module.configure">
    <property name="module.exec.todir" value="${deploy.dir}" />
    <message name="exec.configure" />
          
    <pathconvert property="sfi.config.resPaths">
      <path path="${sfi.config.propsPaths}" />
      <chainedmapper>
        <globmapper from="*.properties" to="*" />
      </chainedmapper>
    </pathconvert>

    <!-- Note: Restict propagate Resource nature, Mapper don't -->
    <subant genericantfile="${ant.file.sfi-command}" 
       target="filteredCopy" inheritall="true" >
      <restrict>
        <path path="${sfi.config.resPaths}" />
        <rsel:exists/>
      </restrict>
    </subant>
  </target>


  <target name="module.move" if="module.exec.tofile">
    <property name="module.exec.output" value="${module.exec.fromfile}" />
    <message name="exec.move" />
    <move file="${deploy.dir}/${module.exec.todir}/${module.exec.output}" 
        tofile="${deploy.dir}/${module.exec.todir}/${module.exec.tofile}" />

  </target>

  <target name="module.delegate">
    <property name="module.exec" value="${module.name}.ant" /> <!-- default value -->

    <condition property="module.exec.antfile" value="${deploy.dir}/${module.exec.ant}"
      else="${modules.dir}/${module.exec}">
      <isset property="module.exec.ant" />
    </condition>

    <property name="module.exec.target" value="${module.command}" />

    <message name="exec.delegate" />
    <ant antfile="${module.exec.antfile}" target="${module.exec.target}" 
        useNativeBasedir="true" />

    <property name="module.exec.todir" value="." />
    <antcall target="module.move" />
  </target>




  <target name="downloadList" if="module.exec.urls">
    <property name="module.exec.todir" value="." />

	 <!-- car than cannot math a url : by default flatten -->
	<property name="module.exec.base" value="&gt;" />
	
    <mkdir dir="${download.dir}/${module.exec.todir}" />
	
	<pathconvert property="downloadedFiles" >
	   <resourcelist>
        <file file="${module.exec.urls}" />
        <filterchain>
          <expandproperties />
        </filterchain>
      </resourcelist>
	
	  <chainedmapper>
	    <firstmatchmapper>
          <globmapper from="${module.exec.base}*" to="*"/>
          <flattenmapper/>
        </firstmatchmapper>
		<globmapper from="*" to="${download.dir}/${module.exec.todir}/*" />
      </chainedmapper>
	</pathconvert>
	  
	<!-- Get does not create path but touch does -->

	<touch mkdirs="true">
      <path>
        <pathelement path="${downloadedFiles}"/>
      </path>
	</touch>
	
    <delete> <!-- this remove files, not dir -->
      <path>
        <pathelement path="${downloadedFiles}"/>
      </path>
    </delete>

	
    <get dest="${download.dir}/${module.exec.todir}" >
      <resourcelist>
        <file file="${module.exec.urls}" />
        <filterchain>
          <expandproperties />
        </filterchain>
      </resourcelist>

	  <firstmatchmapper>
        <globmapper from="${module.exec.base}*" to="*"/>
        <flattenmapper/>
      </firstmatchmapper>
    </get>
  </target>

  <target name="module.download" depends="downloadList" unless="module.exec.urls">
    <assert name="missingUrl">
      <isset property="module.exec.url" />
    </assert>
    <property name="module.exec.todir" value="." />
    <mkdir dir="${download.dir}/${module.exec.todir}" />
    <property name="module.exec.tofile" value="${module.exec.todir}" />
    <get src="${module.exec.url}" dest="${download.dir}/${module.exec.tofile}" verbose="true" />
  </target>



  <target name="assertFromDefined">
    <assert name="missingFrom" >
      <or>
        <isset property="module.exec.fromfile" />
        <isset property="module.exec.fromdir" />
      </or>
    </assert>

    <property name="module.exec.fromfile" value="**/*" />
    <property name="module.exec.fromdir" value="." />
    <property name="module.exec.todir" value="." />
        
    <assert name="emptyFrom" >
      <resourcecount when="greater" count="0" >
        <fileset dir="${repo.dir}/${module.exec.fromdir}" includes="${module.exec.fromfile}" />
      </resourcecount>
    </assert>
  </target>


  <target name="module.copy" depends="assertFromDefined">

    <message name="exec.copy" />
    <mkdir dir="${deploy.dir}/${module.exec.todir}" />
    <copy todir="${deploy.dir}/${module.exec.todir}" overwrite="true">
      <fileset dir="${repo.dir}/${module.exec.fromdir}" includes="${module.exec.fromfile}" />
    </copy>

    <!-- Set the expected name -->
    <antcall target="module.move" />

  </target>



  <target name="module.unpack" depends="assertFromDefined">
    <message name="exec.unpack" />

    <mkdir dir="${deploy.dir}/${module.exec.todir}" />
    <property name="module.exec.compress[${module.exec.compress}]" value="" />
      
    <unzip dest="${deploy.dir}/${module.exec.todir}" overwrite="true">
      <fileset dir="${repo.dir}/${module.exec.fromdir}">
        <or>
          <selector unless="module.exec.compress" >
            <and>
              <filename name="${module.exec.fromfile}" />
              <filename name="**/*.tar" negate="true" />
              <filename name="**/*.tar.gz" negate="true" />
              <filename name="**/*.tar.bz" negate="true" />
            </and>
          </selector>
          <selector if="module.exec.compress[zip]" >
            <filename name="${module.exec.fromfile}" />
          </selector>
        </or>
      </fileset>
    </unzip>
    <untar dest="${deploy.dir}/${module.exec.todir}" compression="none" overwrite="true">
      <fileset dir="${repo.dir}/${module.exec.fromdir}">
        <or>
          <selector unless="module.exec.compress" >
            <and>
              <filename name="${module.exec.fromfile}" />
              <filename name="**/*.tar" />
            </and>
          </selector>
          <selector if="module.exec.compress[tar]" >
            <filename name="${module.exec.fromfile}" />
          </selector>
        </or>
      </fileset>
    </untar>
    <untar dest="${deploy.dir}/${module.exec.todir}" compression="gzip" overwrite="true">
      <fileset dir="${repo.dir}/${module.exec.fromdir}">
        <or>
          <selector unless="module.exec.compress" >
            <and>
              <filename name="${module.exec.fromfile}" />
              <filename name="**/*.tar.gz" />
            </and>
          </selector>
          <selector if="module.exec.compress[gzip]" >
            <filename name="${module.exec.fromfile}" />
          </selector>
        </or>
      </fileset>
    </untar>
    <untar dest="${deploy.dir}/${module.exec.todir}" compression="bzip2" overwrite="true">
      <fileset dir="${repo.dir}/${module.exec.fromdir}">
        <or>
          <selector unless="module.exec.compress" >
            <and>
              <filename name="${module.exec.fromfile}" />
              <filename name="**/*.tar.bz" />
            </and>
          </selector>
          <selector if="module.exec.compress[bzip2]" >
            <filename name="${module.exec.fromfile}" />
          </selector>
        </or>
      </fileset>
    </untar>

    <antcall target="module.move" />
  </target>

<!--
  <target name="module.get" >
    <assert>
      <isset property="module.exec.urls" />
    </assert>
    <property name="module.exec.todir" value="." />
      
    
    <mkdir dir="${download.dir}/${module.exec.todir}" />

    
    <pathconvert property="downloadedFiles" >
      <resourcelist>
          <file file="${module.exec.urls}" />
          <filterchain>
            <expandproperties />
          </filterchain>
        </resourcelist>
      
        <chainedmapper>
          <firstmatchmapper>
            <globmapper from="${module.exec.base}*" to="*"/>
            <flattenmapper/>
          </firstmatchmapper>
          <globmapper from="*" to="${download.dir}/${module.exec.todir}/*" />
        </chainedmapper>
      </pathconvert>
        

      <echo>downloadedFiles ${downloadedFiles}</echo>
      <touch mkdirs="true">
        <path>
          <pathelement path="${downloadedFiles}"/>
        </path>
      </touch>
      
     
      <get dest="${download.dir}/${module.exec.todir}" >
        <resourcelist>
          <file file="${module.exec.urls}" />
          <filterchain>
            <expandproperties />
          </filterchain>
        </resourcelist>

        <firstmatchmapper>
          <globmapper from="${module.exec.base}*" to="*"/>
          <flattenmapper/>
        </firstmatchmapper>
      </get>
    </target>
-->
    
</project>
