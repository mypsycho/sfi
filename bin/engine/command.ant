<?xml version="1.0" encoding="UTF-8"?>

<project name="sfi-command" basedir="../..">

  <macrodef name="message">
    <attribute name="name" />
    <sequential>
      <concat taskname="   info  " >
        <string>${message.@{name}}</string>
        <filterchain>
          <expandproperties />
        </filterchain>
      </concat>
    </sequential>
  </macrodef>
    
  <macrodef name="assert">
    <attribute name="name" />
    <element name="assert" implicit="true" />
    <sequential>
      <loadfile property="sfi-failure[@name]" >
        <concat>
          <string>${message.error.@{name}}</string>
          <filterchain>
            <expandproperties />
          </filterchain>
        </concat>
      </loadfile>
      <fail message="${sfi-failure[@name]}" taskname=" error ">
        <condition>
          <not>
            <assert />
          </not>
        </condition>
      </fail>
    </sequential>
  </macrodef>

  <!-- Macro is required to have a recursive interpretation of properties -->
  <macrodef name="do">
    <attribute name="command" />
    <sequential>
      <antcall target="module.${module.exec[@{command}]}" />
    </sequential>
  </macrodef>


  <target name="assertModuleExists" unless="module.name">
    <message name="error.missingModule" />
    <echoproperties taskname=" info  ">
      <propertyset>
        <propertyref regex="^sfi\.([a-zA-Z]+)\.name$$" />
        <regexpmapper from="^sfi\.([a-zA-Z]+)\.name$$" to="\1" />
      </propertyset>
    </echoproperties>
    <assert message="missingModule">
      <not><isset property="module.name" /></not>
    </assert>
  </target>

  <target name="module.exec" depends="assertModuleExists">
    <!-- default command is delegate -->
    <property name="module.exec[${module.command}]" value="delegate" />
    <do command="${module.command}" />
  </target>

  <target name="module.message">
    <message name="${module.exec.message}" />
  </target>


  <target name="module.configure">
    <message name="exec.configure" />

    <property name="module.exec.fromfile" value="**/*" />
    <property name="module.exec.fromdir" value="${conf.dir}/${config}" />
    <property name="module.exec.todir" value="${deploy.dir}" />

    <copy todir="${module.exec.todir}" overwrite="true">
      <fileset dir="${module.exec.fromdir}" includes="${module.exec.fromfile}" />
      <filterset>
        <filtersfile file="${filter.file}" />
        <filter token="basedir" value="${basedir}" />
      </filterset>
    </copy>
    <chmod dir="${deploy.dir}" perm="ugo+rx">
      <include name="**/*.sh" />
      <include name="**/*.ksh" />
      <include name="**/*.csh" />
    </chmod>
  </target>


  <target name="module.move" if="module.exec.output">
    <!-- if module.exec.tofile is not defined, move is neutral -->
    <property name="module.exec.tofile" value="${module.exec.output}" />

    <message name="exec.move" />
    <move file="${deploy.dir}/${module.exec.todir}/${module.exec.output}" 
        tofile="${deploy.dir}/${module.exec.todir}/${module.exec.tofile}" />

  </target>

  <target name="module.delegate">
    <property name="module.exec" value="${module.name}.ant" /> <!-- default value -->

    <condition property="module.exec.antfile" value="${deploy.dir}/${module.exec.ant}"
      else="${modules.dir}/${module.exec}">
      <isset property="module.exec.ant" />
    </condition>

    <property name="module.exec.target" value="${module.command}" />
    <message name="exec.delegate" />

    <ant antfile="${module.exec.antfile}" target="${module.exec.target}" 
        useNativeBasedir="true" />

    <property name="module.exec.todir" value="." />
    <antcall target="module.move" />
  </target>




  <target name="downloadList" if="module.exec.urls">
    <property name="module.exec.todir" value="." />
    <mkdir dir="${download.dir}/${module.exec.todir}" />
    <get dest="${download.dir}/${module.exec.todir}">
      <resourcelist>
        <file file="${module.exec.urls}" />
        <filterchain>
          <expandproperties />
        </filterchain>
      </resourcelist>
    </get>
  </target>

  <target name="module.download" depends="downloadList" unless="module.exec.urls">
    <assert name="missingUrl">
      <isset property="module.exec.url" />
    </assert>
    <property name="module.exec.todir" value="." />
    <mkdir dir="${download.dir}/${module.exec.todir}" />
    <property name="module.exec.tofile" value="${module.exec.todir}" />
    <get src="${module.exec.url}" dest="${download.dir}/${module.exec.tofile}" verbose="true" />
  </target>



  <target name="assertFromDefined">
    <assert name="missingFrom" >
      <or>
        <isset property="module.exec.fromfile" />
        <isset property="module.exec.fromdir" />
      </or>
    </assert>
  </target>


  <target name="module.copy" depends="assertFromDefined">
    <condition property="module.exec.output" value="${module.exec.fromfile}">
      <isset property="module.exec.fromfile" />
    </condition>

    <property name="module.exec.fromfile" value="**/*" />
    <property name="module.exec.fromdir" value="." />
    <property name="module.exec.todir" value="." />

    <message name="exec.copy" />
    <mkdir dir="${deploy.dir}/${module.exec.todir}" />
    <copy todir="${deploy.dir}/${module.exec.todir}" overwrite="true">
      <fileset dir="${repo.dir}/${module.exec.fromdir}" includes="${module.exec.fromfile}" />
    </copy>

    <!-- Set the expected name -->
    <antcall target="module.move" />

  </target>



  <target name="module.unpack" depends="assertFromDefined">
    <property name="module.exec.fromdir" value="." />
    <property name="module.exec.fromfile" value="**/*" />
    <property name="module.exec.todir" value="." />

    <message name="exec.unpack" />

    <echo></echo>
    <mkdir dir="${deploy.dir}/${module.exec.todir}" />
    <unzip dest="${deploy.dir}/${module.exec.todir}" overwrite="true">
      <fileset dir="${repo.dir}/${module.exec.fromdir}">
        <filename name="${module.exec.fromfile}" />
        <exclude name="**/*.tar" />
        <exclude name="**/*.tar.gz" />
        <exclude name="**/*.tar.bz" />
      </fileset>
    </unzip>
    <untar dest="${deploy.dir}/${module.exec.todir}" compression="none" overwrite="true">
      <fileset dir="${repo.dir}/${module.exec.fromdir}">
        <and>
          <filename name="${module.exec.fromfile}" />
          <filename name="**/*.tar" />
        </and>
      </fileset>
    </untar>
    <untar dest="${deploy.dir}/${module.exec.todir}" compression="gzip" overwrite="true">
      <fileset dir="${repo.dir}/${module.exec.fromdir}">
        <and>
          <filename name="${module.exec.fromfile}" />
          <filename name="**/*.tar.gz" />
        </and>
      </fileset>
    </untar>
    <untar dest="${deploy.dir}/${module.exec.todir}" compression="bzip2" overwrite="true">
      <fileset dir="${repo.dir}/${module.exec.fromdir}">
        <and>
          <filename name="${module.exec.fromfile}" />
          <filename name="**/*.tar.bz" />
        </and>
      </fileset>
    </untar>

    <antcall target="module.move" />

  </target>



</project>