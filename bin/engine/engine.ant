<?xml version="1.0" encoding="UTF-8"?>

<project name="sfi-engine" default="engine" basedir="../.." >

  <description>Interpret commands on the Software factory.</description>
    

  <property name="config" value="default" />
  <property name="sfi.basedir" location="${ant.file.sfi-engine}/../../.." />
  <property name="binaries.dir" location="${sfi.basedir}/bin" />
  
  <property name="sfi.tmp.dir" value="${sfi.basedir}/run" />
  <property name="sfi.exeResume" value="${sfi.tmp.dir}/rerun.properties" />
  
  <property name="sfi.config.path" value="${config}" />
  <property name="sfi.exec.mode" value="" /> <!-- May be worth TEST -->
  <property file="${binaries.dir}/engine/messages.properties" 
      prefix="message" /> <!-- todo: find a localization -->
  
  <macrodef name="message" >
    <attribute name="name" />
    <sequential>
      <concat taskname=" sfi " >
        <string>${message.@{name}}</string>
        <filterchain>
          <expandproperties/>
        </filterchain>
      </concat>
    </sequential>
  </macrodef>
  
  <import file="${binaries.dir}/engine/command${sfi.exec.mode}.ant" />


  <target name="execCommand" >
    <!-- basename property="module.command.id" file="${basedir}" /-->
    <pathconvert property="module.id" > <!-- extract module.id from basedir -->
      <file basedir="" file="${basedir}" />
      <regexpmapper handledirsep="true" from="^(.+)/([^/]+)\.([^/\.]+)$$" to="\2" />
    </pathconvert>
    <pathconvert property="command.id" > <!-- extract command.id from basedir -->
      <file basedir="" file="${basedir}" />
      <regexpmapper handledirsep="true" from="^(.+)/([^/]+)\.([^/\.]+)$$" to="\3" />
    </pathconvert>

    <message name="start.command" />
    <antcall target="module.exec" >
      <param name="module.command" value="${command.id}" />
      <propertyset >
        <propertyref prefix="sfi.${module.id}." />
        <firstmatchmapper>
          <globmapper from="sfi.${module.id}.${command.id}.*" to="module.exec.*" />
          <globmapper from="sfi.${module.id}.*" to="module.*" />
        </firstmatchmapper>
        
      </propertyset>
    </antcall>

    <echo file="${sfi.exeResume}" append="true">${module.id}.${command.id} done&#xA;</echo>
  </target>
    
  
  <target name="loadConfiguration" >
    <!-- 
      Special runtime properties. 
      Use java.home/.., because of ANT force its to inner jre.
      We need relative path of ANT and JDK.
    -->
    <property name="sfi.jdk.home" location="${java.home}/.."  /> 
    <basename property="sfi.ant.home" location="${ant.home}"  />
    <property name="sfi.basedir" value="${basedir}" />
    
	<pathconvert property="sfi.basedir.java" dirsep="/" >
      <path location="${basedir}" />
    </pathconvert>
    <pathconvert property="sfi.ant.home.java" dirsep="/" >
      <path location="${sfi.ant.home}" />
    </pathconvert>
    <pathconvert property="sfi.jdk.home.java" dirsep="/" >
      <path location="${sfi.jdk.home}" />
    </pathconvert>

	
    <hostinfo prefix="sfi.hostinfo" />
    <loadfile property="sfi.profile" srcFile="${basedir}/profil.cfg" failonerror="false" >
      <filterchain>
        <trim/>
        <striplinebreaks/>
      </filterchain>
    </loadfile>


    <loadproperties>
      <concat> <!-- Concatenation provides post-redefinition -->
        <path>
          <pathelement location="${binaries.dir}/commands/engine.properties" />
          <pathelement location="${binaries.dir}/commands/engine_${sfi.profile}.properties" />
        </path>
      </concat>
    </loadproperties>

    <loadproperties>
      <concat> <!-- Concatenation provides list handling with optional content -->
        <restrict xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors" >
          <filelist dir="${basedir}" files="${ext.properties}" /> 
          <rsel:exists />
        </restrict>
      </concat>
    </loadproperties>
    

    <property name="config" value="default" />
    <property file="${conf.dir}/${config}.properties" prefix="sfi" />
  
    <mkdir dir="${deploy.dir}" />
    <!--                                                    -->
    <!--    Convert properties sfi.* into filter values     -->
    <!--                                                    -->
    <tempfile property="command.dir" deleteonexit="false" destdir="${sfi.tmp.dir}" prefix="run" />  
    <mkdir dir="${command.dir}" />
    
    <property name="filter.file" location="${sfi.tmp.dir}/config.properties" />

    <!-- Creation of Filters -->
    <echoproperties destfile="${filter.file}" >
      <propertyset>
        <propertyref prefix="sfi." />
        <mapper type="glob" from="sfi.*" to="*" />
      </propertyset>
    </echoproperties>
    <message name="showGeneratedConf" />
  </target>
    
  <target name="clean" >
    <delete dir="${deploy.dir}" />
  </target>
  
    
  <target name="probeProxy" >
    <condition property="proxy.enabled">
      <and>
        <isset property="sfi.proxy.host" />
        <isreachable host="${sfi.proxy.host}" />
      </and>
    </condition>
  </target>

  <target name="setProxy" depends="probeProxy" if="proxy.enabled" >
    <property name="sfi.proxy.port" value="80" />
    <property name="sfi.proxy.user" value="" />
    <property name="sfi.proxy.pass" value="" />
    <setproxy proxyhost="${sfi.proxy.host}" proxyport="${sfi.proxy.port}"
        proxyuser="${sfi.proxy.user}" proxypassword="${sfi.proxy.pass}" />
  </target>

  
  <target name="engine" depends="loadConfiguration,setProxy" >
    <fail unless="command" message="command is required" />
    <!-- load the sequence file  -->
    <property name="commands.file" 
        location="${binaries.dir}/commands/${command}.modules" />
    
    <!-- Converting command in temporary folder : pseudo-for  -->
    <touch mkdirs="true" verbose="false" >
      <resourcelist>
        <file file="${commands.file}" />
        <filterchain>
          <ignoreblank />
          <striplinecomments>
            <comment value="#" />
          </striplinecomments>
          <tokenfilter>
            <replaceregex pattern="^([^\.]+)$$" replace="\1.${command}" />
          </tokenfilter>
          <prefixlines prefix="${command.dir}/" />
          <suffixlines suffix="/stub" />
        </filterchain>
      </resourcelist>
    </touch>
    <echo file="${sfi.exeResume}" >resume=${commands.file}&#xA;</echo>

    
    <!-- Running commands -->
    <subant genericantfile="${ant.file}" target="execCommand" inheritall="true" >
      <resourcelist> 
        <!-- Note:
        to keep order, we must use ${commands.file} and resourceList.
        Reading generated folder will not give us the order of execution.
        -->
        <file file="${commands.file}" />
        <filterchain>
          <ignoreblank />
          <striplinecomments>
            <comment value="#" />
          </striplinecomments>
          <tokenfilter>
            <replaceregex pattern="^([^\.]+)$$" replace="\1.${command}" />
          </tokenfilter>
          <prefixlines prefix="${command.dir}/" />
        </filterchain>
      </resourcelist>      
    </subant>

    <delete includeEmptyDirs="true" >
      <fileset dir="${sfi.tmp.dir}" excludes="config.properties" />
    </delete>
  </target>
  

    
  <target name="exec" >
    <input message="Commands of modules to execute ?" addproperty="modules" />

    <!-- Creating a temporary command file -->
    <tempfile property="commands.file" 
        destDir="${sfi.tmp.dir}" prefix="exec" suffix=".modules" />
    
    <concat destfile="${commands.file}" >
      <resources>
        <string value="${modules}" />
      </resources>
      <filterchain>
        <tokenfilter>
          <replacestring from=" " to="${line.separator}" />
        </tokenfilter>
      </filterchain>
    </concat>
    
    <!-- Running commands -->
    <antcall target="engine" >
      <param name="command" value="exec" />
    </antcall>
    
    <delete file="${commands.file}" />
  </target>
  

    
</project>